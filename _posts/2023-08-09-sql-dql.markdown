---
layout: learning
title:  "SQL: Data Query Language"
subtitle: "JOINs, Clauses, & Window Functions"
date:   2023-08-09 20:45:31 +0700
categories: ["edu"]
tags: ["sql", "dql", "set theory"]
author: "Karie Moorman"
---

<div class='content-pad'>
<p>Data Query Language (DQL) is an SQL database structure specifying how to perform query operations on database schema objects (e.g., tables within a database). DQL focuses primarily on SELECT statements for retrieving data from a SQL database. Three types of DQL structures used in SELECT statements are described below: Table JOINs, SQL Clauses, and Window Functions.</p>
</div>


---


<h3 align='center'>Table of Contents</h3>
<div class='tbl'>
<ul style='display: flex; flex-wrap: row; gap: 30px; margin-left: 10px; justify-content: center;'>
<li><a href='#set'>Set Theory</a></li>
<li><a href='#join'>Table JOINs</a></li>
<li><a href='#clause'>SQL Clauses</a></li>
<li><a href='#window'>Window Functions</a></li>
<li><a href='#example'>Examples</a></li>
<!-- <li><a href='#resource'>Resources</a></li> -->
</ul>
</div>

--- 

<h3 id='set' align='center'>Set Theory</h3>

<div style='padding-bottom: 20px;'>
<p>Before diving into DQL, it's important to review Set Theory. Why? SQL is used to manage and manipulate relational databases. And Set Theory is the math that underlies that relation-based management and manipulation.</p>
<p>
Set theory is a branch of mathematical logic that focuses on the study of sets. Set theory as a framework describes how to logically relate elements within and across sets (or database tables).
Sets are collections of distinct objects (e.g., fruits, shoes, monthly sales). 
An element is said to be a member of a set if it is part of the collection represented by that set (e.g., apples, kiwis, and bananas are all elements of the set Fruit).
A set is considered a subset of another set if every element is included across both sets (e.g., Dogs is a subset of Mammals). A set is considered a superset if it contains all the elements of a subset and more (e.g., Mammals is a superset of Dogs). Sets are considered empty if they contain no elements. Empty sets are different from non-existent sets (i.e., a set that itself does not exist).
</p>
</div>

<div style='padding-bottom: 20px;'>
<table align='center'>
<thead>
<tr><th>Symbol</th><th>Definition</th><th>Example</th></tr>
</thead>
<tbody>
<tr><td align='center'>a ∈ A</td><td>Element: a is an element of set A</td><td> 2 ∈ {1, 2, 3} </td></tr>
<tr><td align='center'>a ∉ A</td><td>Not an Element: a is not an element of set A</td><td> 4 ∉ {1, 2, 3} </td></tr>
<tr><td align='center'>|A|</td><td>Cardinality: Number of unique elements in A</td><td> |{1, 2, 3, 2, 3}| = 3 </td></tr>
<tr><td align='center'>A ⊆ B</td><td>Subset: A is a subset of B (or equal to B)</td><td> {1, 2} ⊆ {1, 2, 3} </td></tr>
<tr><td align='center'>A ⊂ B</td><td>Proper Subset: A is a subset of B (not equal)</td><td> {1, 2} ⊂ {1, 2, 3}</td></tr>
<tr><td align='center'>A ⊄ B</td><td>Not a Subset: A is not a subset of B</td><td>{1, 2} ⊄ {1, 2, 3}</td></tr>
<tr><td align='center'>A ⊇ B</td><td>Superset: A is a superset of B (or equal to B)</td><td> {1, 2, 3} ⊇ {1, 2} </td></tr>
<tr><td align='center'>A ⊃ B</td><td>Proper Superset: A is a superset of B (not equal)</td><td> {1, 2, 3} ⊃ {1, 2} </td></tr>
<tr><td align='center'>A ⊈ B</td><td>Not a Superset: A is not a superset of B</td><td>{1, 2, 3} ⊈ {1, 2}</td></tr>
<tr><td align='center'>A ∪ B</td><td>Union: Elements in A or B (or both)</td><td> {1, 2} ∪ {2, 3} = {1, 2, 3} </td></tr>
<tr><td align='center'>A ∩ B</td><td>Intersection: Elements in both A and B</td><td> {1, 2} ∩ {2, 3} = {2} </td></tr>
<tr><td align='center'>∅ or { }</td><td>Empty Set: Set with no elements</td><td>{1, 2} ∩ {3, 4} = { }</td></tr>
<tr><td align='center'>A ⊥ B</td><td>Disjoint: Sets A and B have no elements in common</td><td>{1, 2} ⊥ {3, 4}</td></tr>
<tr><td align='center'>A ∆ B</td><td>Symmetric Difference: Elements in A or B, but not both (A Δ B = (A - B) ∪ (B - A))</td><td>{1, 2} ∆ {2, 3} = {1, 3}</td></tr>
<tr><td align='center'>A'</td><td> Complement: Elements not in set A</td><td>Universal Set - A</td></tr>
<tr><td align='center' width='100px;'>A - B or A \ B</td><td>Relative Complement: Elements in A but not in B (set difference)</td><td> {1, 2, 3} - {2} = {1, 3} </td></tr>
<tr><td align='center'>A × B</td><td>Cartesian Product: All ordered pairs</td><td>(a, b) {1, 2} × {a, b} = {(1, a), (1, b), (2, a), (2, b)}</td></tr>
<tr><td align='center'> P(A) </td><td>Power Set: Set of all subsets of A</td><td width='210;'>P({1, 2}) = { { }, {1}, {2}, {1, 2} }</td></tr>
</tbody>
</table>
</div>

<div style='padding-bottom: 20px;'>
<p>
With a basic understanding of set theory, and familiarity with nomenclature (i.e., symbols and their respective meanings), we can better understand the purpose of functions within SQL Data Querying Language described below.
</p>
</div>

---

<h3 id='join' align='center'>Table JOINs</h3>
<div>
<p>In SQL, JOINs are specifying and evaluating the relationship between objects across database tables (i.e., elements and element attributes in one or more sets) in order to retrieve a subset of that data for whatever purpose (e.g., analysis, content injection).</p>
</div>
<div>
<!-- <h4>Left JOINs</h4>
<p> </p> -->
<center> 
<div style='padding-bottom: 20px;'>
<img src='/media/images/sql/sql_joins-3-left_joins.drawio.png' width="70%;"/>
</div>
</center>
</div>

<div>
<!-- <h4>Right JOINs</h4>
<p> </p> -->
<center> 
<div style='padding-bottom: 20px;'>
<img src='/media/images/sql/sql_joins-3-right_joins.drawio.png' width="70%;"/>
</div>
</center>
</div>

<div>
<!-- <h4>Full JOINs</h4>
<p> </p> -->
<center> 
<div style='padding-bottom: 20px;'>
<img src='/media/images/sql/sql_joins-3-full_joins.drawio.png' width="70%;"/>
</div>
</center>
</div>

<div>
<!-- <h4>Special JOINs</h4>
<div>
<p> </p>
</div> -->
<center> 
<div style='padding-bottom: 20px;'>
<img src='/media/images/sql/sql_joins-3-special_joins.drawio.png' width="70%;" border="1" />
</div>
</center>
</div>


---

<h3 id='clause' align='center'>SQL Clauses</h3>

<div>
<p>In SQL, GROUP BY, ORDER BY, LIMIT and OFFSET clauses denote how to structure and present the resulant data set.</p>
<center> 
<div style='padding-bottom: 20px;'>
<img src='/media/images/sql/sql_clauses.drawio.png' width="80%;"/>
</div>
</center>
</div>

---

<h3 id='window' align='center'>Window Functions</h3>

<div>
<!-- <h4>Aggregate Window Functions</h4> -->
<p>In SQL, window functions are used to perform mathematical operations on one or more sets of rows and summarize data in various ways. </p>
<center>
<div style='padding-bottom: 20px;'>
<img src='/media/images/sql/sql_window_functions-aggregate_window.drawio.png' width="65%;" border="1" />
</div>
</center>
</div>

<div>
<!-- <h4>Value Window Functions</h4>
<p> </p> -->
<center>
<div style='padding-bottom: 20px;'>
<img src='/media/images/sql/sql_window_functions-value_window.drawio.png' width="70%;">
</div>
</center>
</div>

<div>
<!-- <h4>Rank Window Functions</h4>
<p> </p> -->
<center>
<div style='padding-bottom: 20px;'>
<img src='/media/images/sql/sql_window_functions-rank_window.drawio.png' width="70%;">
</div>
</center>
</div>

--- 

<h3 id='example'>Examples</h3>

<div>
<p>Try out the examples below using one of the following free SQL IDEs: 
</p>
<div style='margin-left: 10px; padding-bottom: 10px;'>
<p>- SQLiteOnline: <a href='https://sqliteonline.com/'>https://sqliteonline.com></a>
</p>
<p>- CoderPad: <a href='https://app.coderpad.io/sandbox'>https://app.coderpad.io/sandbox></a></p>
<p>- Programiz: <a href='https://www.programiz.com/sql/online-compiler/'>https://www.programiz.com/sqlonline-compiler/></a></p>
<p>- DBeaver: <a href='https://dbeaver.io/'>https://dbeaver.io</a></p>
</div>
</div>


<h4>(1) Comparison of AVG, SUM, COUNT, MIN and MAX</h4>

<div style ='display: box; padding-bottom: 20px;'>
<div style='padding: 10px; border: 1px solid #ccc; margin: 5px;'>
<div style='padding: 5px;'>
<b> Create Table & Insert Row Values:</b>
</div>
<pre>
<code>
CREATE TABLE Sales (
    SaleDate DATE,
    ProductName VARCHAR(50),
    SalesAmount DECIMAL(10, 2)
);

INSERT INTO Sales (SaleDate, ProductName, SalesAmount)
VALUES
    ('2023-08-01', 'Product A', 1000.00),
    ('2023-08-02', 'Product A', 1200.00),
    ('2023-08-03', 'Product A', 1500.00),
    ('2023-08-01', 'Product B', 800.00),
    ('2023-08-02', 'Product B', 900.00),
    ('2023-08-03', 'Product B', 1100.00);
</code>
</pre>
</div>
<div style='padding: 10px; border: 1px solid #ccc; margin: 5px; white-space: normal;'>
<div style='padding: 5px;'>
<b> Construct SELECT Statement:</b>
</div>
<pre>
<code>
SELECT
    ProductName,
    SUM(SalesAmount) AS TotalSales,
    AVG(SalesAmount) AS AverageSales,
    COUNT(*) AS NumberOfSales,
    MIN(SalesAmount) AS MinSales,
    MAX(SalesAmount) AS MaxSales
FROM Sales
GROUP BY ProductName;
</code>
</pre>
</div>

<div style='padding: 10px; border: 1px solid #ccc; margin: 5px; white-space: normal;'>
<div style='padding: 5px;'>
<b>Expected Results:</b>
</div>
<table align='center'>
<thead>
<tr><th>ProductName</th><th>TotalSales</th><th>AverageSales</th><th>NumberOfSales</th><th>MinSales</th><th>MaxSales</th></tr>
</thead>
<tbody>
<tr><td align='center'>Product A</td><td align='center'>3700.00</td><td>1233.33 </td><td>3 </td><td> 1000.00 </td><td> 1500.00 </td></tr>
<tr><td align='center'>Product B</td><td align='center'>2800.00</td><td>933.33 </td><td>3 </td><td> 800.00 </td><td> 1100.00 </td></tr>
</tbody>
</table>
</div>
</div>



<h4>(2) Comparison of LEAD and LAG</h4>

<div style ='display: box; padding-bottom: 20px;'>
<div style='padding: 10px; border: 1px solid #ccc; margin: 5px;'>
<div style='padding: 5px;'>
<b> Create Table & Insert Row Values:</b>
</div>
<pre>
<code>
CREATE TABLE Sales (
    SaleDate DATE,
    ProductName VARCHAR(50),
    SalesAmount DECIMAL(10, 2)
);

INSERT INTO Sales (SaleDate, ProductName, SalesAmount)
VALUES
    ('2023-08-01', 'Product A', 1000.00),
    ('2023-08-02', 'Product A', 1200.00),
    ('2023-08-03', 'Product A', 1500.00),
    ('2023-08-01', 'Product B', 800.00),
    ('2023-08-02', 'Product B', 900.00),
    ('2023-08-03', 'Product B', 1100.00);
</code>
</pre>
</div>
<div style='padding: 10px; border: 1px solid #ccc; margin: 5px; white-space: normal;'>
<div style='padding: 5px;'>
<b> Construct SELECT Statement:</b>
</div>
<pre>
<code>
SELECT
    SaleDate,
    ProductName,
    SalesAmount,
    LEAD(SalesAmount) OVER (PARTITION BY ProductName ORDER BY SaleDate) AS NextDaySales,
    LAG(SalesAmount) OVER (PARTITION BY ProductName ORDER BY SaleDate) AS PreviousDaySales
FROM Sales
ORDER BY ProductName, SaleDate;
</code>
</pre>
</div>

<div style='padding: 10px; border: 1px solid #ccc; margin: 5px; white-space: normal;'>
<div style='padding: 5px;'>
<b>Expected Results:</b>
</div>
<table align='center'>
<thead>
<tr><th>SaleDate</th><th>ProductName</th><th>SalesAmount</th><th>NextDaySales</th><th>PreviousDaySales</th></tr>
</thead>
<tbody>
<tr><td align='center'>2023-08-01</td><td align='center'>Product A</td><td>1000.00 </td><td> 1200.00 </td><td> NULL </td></tr>
<tr><td align='center'>2023-08-02</td><td align='center'>Product A</td><td>1200.00 </td><td> 1500.00 </td><td> 1000.00 </td></tr>
<tr><td align='center'>2023-08-03</td><td align='center'>Product A</td><td>1500.00 </td><td> NULL </td><td> 1200.00 </td></tr>
<tr><td align='center'>2023-08-01</td><td align='center'>Product B</td><td>800.00 </td><td> 900.00 </td><td> NULL </td></tr>
<tr><td align='center'>2023-08-02</td><td align='center'>Product B</td><td>900.00 </td><td> 1100.00 </td><td> 800.00 </td></tr>
<tr><td align='center'>2023-08-03</td><td align='center'>Product B</td><td>1100.00 </td><td> NULL </td><td> 900.00 </td></tr>
</tbody>
</table>
<div style='padding: 5px;padding-top: 20px;'>
<p> Notice that NextDaySales is looking ahead (LEAD), while PreviousDaySales is looking behind (LAG). </p>
</div>
</div>
</div>



<h4>(3) Comparison of RANK, DENSE_RANK, and ROW</h4>

<div style ='display: box; padding-bottom: 20px;'>
<div style='padding: 10px; border: 1px solid #ccc; margin: 5px;'>
<div style='padding: 5px;'>
<b> Create Table & Insert Row Values:</b>
</div>
<pre>
<code>
CREATE TABLE Sales (
    ProductName VARCHAR(50)
    , Region VARCHAR(50)
    , SalesAmount DECIMAL(10, 2)
);

INSERT INTO Sales (ProductName, Region, SalesAmount)
VALUES
    ('Product A', 'Region 1', 1000.00),
    ('Product A', 'Region 2', 1500.00),
    ('Product A', 'Region 3', 300.00),
    ('Product B', 'Region 1', 800.00),
    ('Product B', 'Region 2', 1200.00),
    ('Product B', 'Region 3', 2000.00),
    ('Product C', 'Region 1', 500.00),
    ('Product C', 'Region 3', 2000.00),
    ('Product D', 'Region 1', 1000.00),
    ('Product D', 'Region 2', 1000.00);
</code>
</pre>
</div>
<div style='padding: 10px; border: 1px solid #ccc; margin: 5px; white-space: normal;'>
<div style='padding: 5px;'>
<b> Construct SELECT Statement:</b>
</div>
<pre>
<code>
SELECT
    ProductName
    , Region
    , SalesAmount
    , RANK() OVER (PARTITION BY Region ORDER BY SalesAmount DESC) AS Rank
    , DENSE_RANK() OVER (PARTITION BY Region ORDER BY SalesAmount DESC) AS DenseRank
    , ROW_NUMBER() OVER (PARTITION BY Region ORDER BY SalesAmount DESC) AS RowNumber
FROM Sales;
</code>
</pre>
</div>

<div style='padding: 10px; border: 1px solid #ccc; margin: 5px; white-space: normal;'>
<div style='padding: 5px;'>
<b>Expected Results:</b>
</div>
<table align='center'>
<thead>
<tr><th>ProductName</th><th>Region</th><th>SalesAmount</th><th>Rank</th><th>DenseRank</th><th>RowNumber</th></tr>
</thead>
<tbody>
<tr><td align='center'>Product A </td><td align='center'>Region 1 </td><td>1000.00  </td><td> 1 </td><td>1 </td><td> 1 </td></tr>
<tr><td align='center'>Product D </td><td align='center'>Region 1 </td><td>1000.00   </td><td> 1 </td><td>1 </td><td> 2 </td></tr>
<tr><td align='center'>Product B </td><td align='center'>Region 1 </td><td>800.00  </td><td> 3 </td><td>2 </td><td> 3 </td></tr>
<tr><td align='center'>Product C </td><td align='center'>Region 1 </td><td>500.00  </td><td> 4 </td><td>3 </td><td> 4 </td></tr>
<tr><td align='center'>Product A </td><td align='center'>Region 2 </td><td>1500.00 </td><td> 1 </td><td>1 </td><td> 1 </td></tr>
<tr><td align='center'>Product B </td><td align='center'>Region 2 </td><td>1200.00 </td><td> 2 </td><td>2 </td><td> 2 </td></tr>
<tr><td align='center'>Product D </td><td align='center'>Region 2 </td><td>1000.00 </td><td> 3 </td><td>3 </td><td> 3 </td></tr>
<tr><td align='center'>Product B </td><td align='center'>Region 3 </td><td>2000.00 </td><td> 1 </td><td>1 </td><td> 1 </td></tr>
<tr><td align='center'>Product C </td><td align='center'>Region 3 </td><td>2000.00 </td><td> 1 </td><td>1 </td><td> 2 </td></tr>
<tr><td align='center'>Product A </td><td align='center'>Region 3 </td><td>300.00 </td><td> 3 </td><td>2 </td><td> 3 </td></tr>
</tbody>
</table>
<div style='padding: 5px;padding-top: 20px;'>
<p> Notice that RANK skips integers, while DENSE_RANK preserves consecutive integer values, and ROW_NUMBER preserves row number as a function of the PARTITION statement. </p>
</div>
</div>
</div>

---
